{% extends 'base.html.twig' %}

{% block title %}Module Details{% endblock %}

{% block body %}
    <h1>{{ module.name }}</h1>
    {% if module.status == 1 and module.startedAt is defined and module.startedAt is not null %}
        <p>Etat du module: En marche </p>
        <p>En fonctionnement depuis le {{ module.startedAt|date('d-m-Y H:i:s', 'Europe/Paris') }}</p>
    {% elseif module.stoppedAt is defined and module.stoppedAt is not null %}
        <p>Etat du module: Eteint</p>
        <p>Eteint depuis le {{ module.stoppedAt|date('d-m-Y H:i:s', 'Europe/Paris') }}</p>
    {% else %}
        <p>Etat du module: Inconnu</p>
    {% endif %}
   
    {% set sensorData = [] %}
    {% for sensor in sensors %}
        {% set sensorItem = { 'id': sensor.id, 'type': sensor.type } %}
        {% set sensorData = sensorData|merge([sensorItem]) %}
    {% endfor %} 

    {% set measurementData = [] %}
    {% for measurement in measurements %}
        {% set sensorId = measurement.sensor.id %}
        {% set measurementItem = { 'id': measurement.id, 'value': measurement.value, 'createdAt': measurement.createdAt, 'sensorId': sensorId } %}
        {% set measurementData = measurementData|merge([measurementItem]) %}
    {% endfor %}

    {% set moduleData = {
        id: module.id,
        name: module.name,
        status:module.status,
        'sensors': sensorData,
        'measurements': measurementData 
        }
    %}
    
    <div id="module-data" hidden="hidden" data-module="{{ moduleData|json_encode}}"></div>
    <div width="200px" height="200px" class="block">
        <select id="sensor-select">
            {% for sensor in moduleData.sensors %}
                <option value="{{ sensor.id }}">{{ sensor.type }}</option>
            {% endfor %}
        </select>
        <canvas id="myChart"></canvas>
    </div>
    {# Afficher d'autres détails du module ici #}
{% endblock %}

{% block javascripts %}
{# Charger la bibliothèque Chart.js avant votre script JavaScript #}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let ctx = document.getElementById('myChart').getContext('2d');
            let data = {
                labels: [],
                datasets: [{
                    label: 'Module Data',
                    data: [],
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }]
            };

            let myChart = new Chart(ctx, {
                type: 'line', // Changez ce type selon votre besoin
                data: data,
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: `Module 1 Data`
                        },
                    },
                    interaction: {
                        intersect: false,
                    },
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Time'
                            }
                        },
                        y: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Temperature'
                            },
                            suggestedMin: -20,
                            suggestedMax: 50
                        }
                    }
                }
            });


            const moduleData = document.getElementById('module-data');
            const moduleDataParsed = JSON.parse(moduleData.dataset.module);
            const sensorSelect = document.getElementById('sensor-select');

            sensorSelect.addEventListener('change', function() {
                const selectedSensorId = parseInt(sensorSelect.value);
                var measurementsForSelectedSensor = moduleDataParsed.measurements.filter(item => item.sensorId === selectedSensorId);
                var limitedMeasurementsForSelectedSensor = measurementsForSelectedSensor.slice(-20);
                       // Formatter les étiquettes et les valeurs pour le nouveau capteur sélectionné
                var labels = limitedMeasurementsForSelectedSensor.map(item => {
                const date = new Date(item.createdAt.date);
                date.setHours(date.getHours() - 6); // Ajoutez 6 heures au temps actuel
                const dayOfMonth = date.getDate();
                const month = date.getMonth() + 1;
                const hours = ('0' + date.getHours()).slice(-2); // Ajoute un zéro devant si nécessaire
                const minutes = ('0' + date.getMinutes()).slice(-2); // Ajoute un zéro devant si nécessaire
                return `${dayOfMonth}/${month} - ${hours}:${minutes}`;
                });

                var values = limitedMeasurementsForSelectedSensor.map(item => item.value);

                // Mettre à jour les données du graphique avec les nouvelles valeurs
                myChart.data.labels = labels;
                myChart.data.datasets[0].data = values;
                myChart.options.scales.y.suggestedMin = Math.min(...values) - 5;
                myChart.options.scales.y.suggestedMax = Math.max(...values) + 5;

                // Mettre à jour le titre du graphique avec le type du nouveau capteur sélectionné
                myChart.options.plugins.title.text = `Module 1 ${moduleDataParsed.sensors.find(sensor => sensor.id === selectedSensorId).type} Data`;

                // Mettre à jour le graphique
                myChart.update();
            });
        });
    </script>
{% endblock %}